service:
  name: ${spring.application.name}
  versions: 1.0
spring:
  application:
    name: template
    version: 1.0
  cloud:
    consul:
      host: ${docker.consulHost:did-cnl-01.sberinsur.local}
      port: 8500
      discovery:
        instanceId: ${spring.application.name}:${docker.instanceId}
        healthCheckPath: ${management.endpoints.web.base-path}/health
        healthCheckInterval: 20s
        tags: service=${spring.application.name}
      config:
        format: FILES
        prefix: ${docker.consulConfigPrefix:inSure/develop}
        enabled: true
        failFast: false
    vault:
      host: ${docker.vaultHost}
      port: 443
      scheme: https
      connection-timeout: 5000
      read-timeout: 5000
      authentication: TOKEN
      token: ${docker.vaultToken}
      generic:
        enabled: true
        backend: insure
kafka:
  bootstrapServers: did-kfk-01.sberinsur.local:9092,did-kfk-02.sberinsur.local:9092,did-kfk-03.sberinsur.local:9092
  errorTopic: ${spring.application.name}_error_topic
  properties:
    "[max.request.size]": 52428800
    "[compression.type]": gzip
  groupConsumer:
    groupId: ${spring.application.name}
    pollTimeout: 3000
    concurrency: 1
    topic: ${spring.application.name}_group
  specificConsumer:
    groupId: ${spring.cloud.consul.discovery.instanceId}
    pollTimeout: 3000
    concurrency: 1
    topic: ${spring.application.name}_specific
  producers:
    bpm:
      groupTopic: bpm_group
      specificTopic: bpm_specific
    template:
      groupTopic: template_group
      specificTopic: template_specific
audit:
  systemName: DID
  journalName: mainJournal
  remoteSystemName: DID
  markerName: AUDIT_SEC
logging:
  logstash:
    host: sv-mcrsrv-elk-04.sberinsur.local:5544

